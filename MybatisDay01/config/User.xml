<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="test">
	<!-- 
		id:sql语句的唯一标识
		parameterType:指定传入参数类型
		resultType:返回结果集类型
		#{}占位符，占位作用，如果接受的参数是基本数据类型，那么#{}中的变量可以随意填写
	 -->
	<select id="findUserById" parameterType="int" resultType="com.wen.pojo.User">
		select * from user where id = #{id}
	</select>
	
	<!-- 
		如果返回值为集合，可以调用selectList方法，这个方法返回的结果就是一个集合，所以映射文件中的结果集类型应该配置集合泛型的类型
		${}拼接符。字符串原样拼接，如果传入的参数是基本数据类型，那么${}中的变量名称必须是value
		注意：拼接符有sql注入的风险。所以慎重使用，like的时候用拼接，等号后用占位
	 -->
	<select id="findUserByName" parameterType="string" resultType="com.wen.pojo.User">
		select * from user where username like '%${value}%';
	</select>
	
	<!-- 
		#{}：如果传入的是pojo类型，那么#{}中的变量名必须是pojo中对应的属性.属性.属性……
		如果要返回函数自增主键，可以使用 LAST_INSERT_ID()数据库函数，返回自增的主键
	 -->
	<insert id="insertUser" parameterType="com.wen.pojo.User">
		<!-- 执行 LAST_INSERT_ID()数据库函数，返回自增的主键
			keyProperty:将返回的主键放入传入参数的id中保存。
			order：当前函数对于insert语句的执行顺序
			resultType:是id的类型，也就是keyProperty中参数的类型
		 -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select LAST_INSERT_ID()
		</selectKey>
		insert into user (username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	<!-- 删除语句 -->
	<delete id="deleteUser" parameterType="int">
		delete from user where id=#{id}
	</delete>
	
	<!-- 更新语句 -->
	<update id="updateUser" parameterType="com.wen.pojo.User">
		update user set username=#{username} where id=#{id}
	</update>
</mapper>